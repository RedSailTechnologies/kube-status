@page "/spark-applications/{applicationstatusparam?}"

@using System.Text.RegularExpressions
@inject SparkApplicationService SparkApplicationService

<h1>Spark Applications Status</h1>

@if (GetApplicationsError)
{
    <p>Unable to get Spark Applications. Please try again later.</p>
}
else
{
    @if (@Applications != null && @Applications.Any())
    {
        <div class="form-group row mb-3">
            <div class="col-sm-4">
                <label for="applicationStatusSelect" class="form-label">Application State Filter</label>
                <select class="form-select" id="applicationStatusSelect" @onchange="@OnSelect">
                    @foreach (var status in ApplicationStatuses)
                    {
                        @if (@status.Key.Equals(@SelectedApplicationStatus, StringComparison.OrdinalIgnoreCase))
                        {
                            <option value=@status.Value selected>@status.Key</option>
                        }
                        else
                        {
                            <option value=@status.Value>@status.Key</option>
                        }
                    }
                </select>
            </div>
        </div>

        <TableTemplate Items="Applications" TItem="SparkApplication" TableHeaderClass="thead-light">
            <TableHeader>
                <th>
                </th>
            </TableHeader>
            <RowTemplate>
                <td>
                    <div class="form-group row mb-2">
                        <div class="col-xl-6">
                            <h4 id="name" class="form-item">@context.Metadata.Name</h4>
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <div class="col-xl-4">
                            <label for="submissionAttempts" class="form-label"><b>Submission Attempts:</b></label>
                            <span id="submissionAttempts" class="form-item">@context.Status.SubmissionAttempts</span>
                        </div>
                        <div class="col-xl-3">
                            <label for="lastSubmissionAttemptTime" class="form-label"><b>Last Submission Attempt
                                    Time:</b></label>
                            <span id="lastSubmissionAttemptTime"
                        class="form-item">@context.Status.LastSubmissionAttemptTime</span>
                        </div>
                        @if (context.Status.TerminationTime != null)
                        {
                            <div class="col-xl-3">
                                <label for="terminationTime" class="form-label"><b>Termination Time:</b></label>
                                <span id="terminationTime" class="form-item">@context.Status.TerminationTime</span>
                            </div>
                        }
                    </div>
                    @if (context.Status.ApplicationState != null)
                    {
                        <div class="row mb-2">
                            <div class="col-xl-4">
                                @if (context.Status.DriverInfo != null)
                                {
                                    foreach (var driverInfo in context.Status.DriverInfo)
                                    {
                                        <h5 id="driver-state-@context.Metadata.Name-driver-info-@driverInfo.Key">@driverInfo.Value</h5>
                                    }
                                }
                            </div>
                            @if (context.Status.ExecutorState != null)
                            {
                                @if (context.Status.ExecutorState.Count < 2)
                                {
                                    <div class="col-xl-7">
                                        @foreach (var execState in context.Status.ExecutorState)
                                        {
                                            <div class="exec-state" id="@context.Metadata.Name-exec-state-@execState.Key">
                                                <label for="exec-state-@context.Metadata.Name-exec-state-@execState.Key"
                            class="form-label">@($"{char.ToUpper(@execState.Key[0])}{@execState.Key.Substring(1)}:")</label>
                                                <span id="exec-state-@context.Metadata.Name-exec-state-@execState.Key"
                            class="form-item">@execState.Value</span>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="col-xl-7">
                                        <button class="btn btn-outline-dark btn-sm collapsed mb-2" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.Metadata.Name-exec-states" aria-expanded="false"
                        aria-controls="@context.Metadata.Name-exec-states">
                                            <span class="show">Show</span><span class="hide">Hide</span> @context.Status.ExecutorState.Count
                                            Executor States
                                        </button>
                                        <div id="@context.Metadata.Name-exec-states" class="exec-states collapse">
                                            @foreach (var execState in context.Status.ExecutorState.OrderBy(s =>
                                           SortRegEx.Match(s.Key).Value.PadLeft(10, '0')))
                                            {
                                                <div class="exec-state" id="@context.Metadata.Name-exec-state-@execState.Key">
                                                    <label for="exec-state-@context.Metadata.Name-exec-state-@execState.Key"
                                class="form-label">@($"{char.ToUpper(@execState.Key[0])}{@execState.Key.Substring(1)}:")</label>
                                                    <span id="exec-state-@context.Metadata.Name-exec-state-@execState.Key"
                                class="form-item">@execState.Value</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="row mb-2">
                            <div class="col-xl-2">
                                @if (context.Status.ExecutionAttempts != null)
                                {
                                    <label for="exec-attempts-@context.Metadata.Name" class="form-label"><b>Executor
                                            Attempts:</b></label>
                                    <span id="exec-attempts-@context.Metadata.Name"
                        class="form-item">@context.Status.ExecutionAttempts</span>
                                }
                            </div>
                        </div>
                        <div class="row mb-2">
                            @if (context.Status.ApplicationState != null)
                            {
                                var sortedAppState = new SortedDictionary<string,
                                string>(context.Status.ApplicationState).OrderByDescending(s => s.Key);
                                foreach (var appState in sortedAppState)
                                {
                                    if (appState.Key.Equals("errorMessage", StringComparison.OrdinalIgnoreCase))
                                    {
                                        <div class="col-xl-1">
                                            <button class="btn btn-outline-dark btn-sm collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.Metadata.Name-app-state-@appState.Key" aria-expanded="false"
                        aria-controls="@context.Metadata.Name-app-state-@appState.Key">
                                                <span class="show">Show</span><span class="hide">Hide</span> Errors
                                            </button>
                                        </div>
                                        <div class="app-state collapse col-sm-12" id="@context.Metadata.Name-app-state-@appState.Key">
                                            <div class="key fw-bold">@($"{char.ToUpper(@appState.Key[0])}{@appState.Key.Substring(1)}:")</div>
                                            <div class="value">
                                                <pre>@appState.Value</pre>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="app-state col-xl-1" id="@context.Metadata.Name-app-state-@appState.Key">
                                            <label for="app-state-@appState.Key"
                        class="form-label"><b>@($"{char.ToUpper(@appState.Key[0])}{@appState.Key.Substring(1)}:")</b></label>
                                            <span id="app-state-@appState.Key" class="form-item">@appState.Value</span>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    }
                    <div class="row mb-2">
                        @if (!string.IsNullOrWhiteSpace(@context.Spec))
                        {
                            <div class="col-xl-1">
                                <button class="btn btn-outline-dark btn-sm collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.Metadata.Name-spec" aria-expanded="false"
                        aria-controls="@context.Metadata.Name-spec">
                                    <span class="show">Show</span><span class="hide">Hide</span> Spec
                                </button>
                            </div>
                            <div class="collapse col-sm-12" id="@context.Metadata.Name-spec">
                                <pre>@context.Spec</pre>
                            </div>
                        }
                    </div>
                </td>
            </RowTemplate>
        </TableTemplate>
    }
    else if (Applications == null)
    {
        <div class="alert alert-info" role="alert">
            Loading @SelectedApplicationStatus Spark Applications...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No @SelectedApplicationStatus Spark Applications Found
        </div>
    }
}

@code {
    [Parameter]
    public string ApplicationStatusParam { get; set; }

    bool GetApplicationsError;
    bool _shouldRender;
    IEnumerable<SparkApplication> Applications;
    Dictionary<string, string> ApplicationStatuses = new Dictionary<string, string>();
    string SelectedApplicationStatus;
    Regex SortRegEx = new Regex(@"([^-]*$)");

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ApplicationStatusParam = ApplicationStatusParam ?? "";
            SelectedApplicationStatus = ApplicationStatusParam;
            ApplicationStatuses.Add("All", "");
            ApplicationStatuses.Add("Failed", "FAILED");
            ApplicationStatuses.Add("Running", "RUNNING");

            await GetSparkApplications();

            _shouldRender = true;
        }
        catch
        {
            GetApplicationsError = true;
        }
    }

    async Task OnSelect(ChangeEventArgs e)
    {
        SelectedApplicationStatus = e.Value.ToString();
        await GetSparkApplications();
    }

    async Task GetSparkApplications()
    {
        Applications = null;
        Applications = await SparkApplicationService.GetSparkApplicationsAsync(SelectedApplicationStatus);
    }
}