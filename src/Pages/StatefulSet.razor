@page "/StatefulSets/{namespaceparam?}"

@using System
@using k8s.Models

@inject NamespaceService NamespaceService
@inject StatefulSetService StatefulSetService
@inject IJSRuntime JsRuntime

<h1>StatefulSets</h1>

@if (GetNamespacesError)
{
    <div class="alert alert-danger" role="alert">
        Unable to get namespaces. Please try again later.
    </div>
}
else
{
    <div class="row">
        @if (@ItemCountAll == @ItemCountFiltered)
        {
            <h6>Items: @ItemCountAll</h6>
        }
        else
        {
            <h6>Filtered: @ItemCountFiltered / @ItemCountAll</h6>
        }
    </div>
    <div class="form-group row mb-3">
        <div class="col-sm-4">
            <label for="namespaceSelect" class="form-label">Select a Namespace</label>
            <select class="form-select" id="namespaceSelect" @onchange="@OnSelect">
                @foreach (var ns in Namespaces)
                {
                    @if (@ns.Equals(@SelectedNamespace))
                    {
                        <option value=@ns selected>@ns</option>
                    }
                    else
                    {
                        <option value=@ns>@ns</option>
                    }
                }
            </select>
        </div>
        <div class="col-sm-2 offset-sm-4">
            <AuthorizeView Policy="RequireEditorRole" Context="auth">
                <button class="btn btn-outline-dark btn-sm" @onclick="() => RestartNamespacedStatefulSetAsync()">Restart All @SelectedNamespace.ToUpper() StatefulSets</button>
            </AuthorizeView>
        </div>
    </div>
    <div class="form-group row mb-3">
        <div class="col-sm-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search..." aria-label="Filter" aria-describedby="button-clear" @bind-value="Filter" @oninput="@FilterChange">
                <button class="btn btn-outline-secondary" type="button" id="button-clear" @onclick="@ClearFilter">Clear</button>
            </div>
        </div>
    </div>
}
@if (StatefulSetListError)
{
    <div class="alert alert-danger" role="alert">
        Unable to list StatefulSets. Please try again later.
    </div>
}
else
{
    @if (!String.IsNullOrWhiteSpace(StatefulSetMessage))
    {
        <div class="alert @AlertClass" role="alert">
            @StatefulSetMessage
        </div>
    }
    else if (@StatefulSetList != null && StatefulSetList.Items != null && @StatefulSetList.Items.Any())
    {
        <TableTemplate Items="FilteredStatefulSetList" TItem="V1StatefulSet" TableHeaderClass="thead-light" TableClass="mb-5">
            <TableHeader>
                <th>
                    <div class="form-group row">
                        <div class="col-xl-2 d-none d-xl-block">
                            <label class="form-label">Name</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Replicas<br /><span class="small">(Spec)</span></label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Replicas<br /><span class="small">(Status)</span></label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Pods<br /><span class="small">(Ready / Total)</span></label>
                        </div>
                        <div class="col-xl-2 d-none d-xl-block">
                            <label class="form-label">Created</label>
                        </div>
                    </div>
                </th>
            </TableHeader>
            <RowTemplate>
                <td>
                    <div class="form-group row">
                        <div class="col-xl-2">
                            <label class="form-label d-xl-none"><b>Name:</b></label>
                            <span id="@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Metadata.Name</span>
                            <AuthorizeView Policy="RequireEditorRole" Context="auth">
                            <div class="my-1">
                                <button class="btn btn-outline-dark btn-sm me-1" @onclick="() => RestartStatefulSet(context.Metadata.Name, context.Metadata.NamespaceProperty)">Restart</button>
                                <button type="button" class="btn btn-outline-dark btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#scaleModal" @onclick="() => OpenScaleModal(context.Metadata.NamespaceProperty, context.Metadata.Name, context.Spec.Replicas)">Scale</button>
                            </div>
                            </AuthorizeView>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Replicas <span class="small">(Spec)</span>:</b></label>
                            <span id="spec-replicas-@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Spec.Replicas</span>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Replicas <span class="small">(Status)</span>:</b></label>
                            <span id="status-replicas-@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Status.Replicas</span>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Pods <span class="small">(Ready / Total)</span>:</b></label>
                            <span id="ready-replicas-@context.Metadata.Name.ToString()" class="form-item small">@context.Status.ReadyReplicas / @context.Status.Replicas</span>
                        </div>
                        <div class="col-xl-2">
                            <label class="form-label d-xl-none"><b>Created:</b></label>
                            <span id="created-@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Metadata.CreationTimestamp</span>
                        </div>
                        </div>
                    </td>
                </RowTemplate>
            </TableTemplate>
<div class="modal fade" id="scaleModal" tabindex="-1" aria-labelledby="scaleModalLabel" aria-hidden="true">
<div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="scaleModalLabel">@ScaleHeading</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <div class="form-group">
            <label for="replicas">Replicas</label>
            <input type="number" min="0" id="replicas" class="form-control" @bind-value="Replicas" />
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-link" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => ScaleStatefulSet()">Save</button>
    </div>
    </div>
</div>
</div>
    }
    else if (StatefulSetList == null)
    {
        <div class="alert alert-info" role="alert">
            Loading StatefulSets...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No StatefulSets found in the @SelectedNamespace namespace
        </div>
    }
}

@code {
    [Parameter]
    public string? NamespaceParam { get; set; }

    bool GetNamespacesError;
    bool StatefulSetListError;
    bool _shouldRender;
    IEnumerable<string> Namespaces = Array.Empty<string>();
    string SelectedNamespace = string.Empty;
    V1StatefulSetList? StatefulSetList;
    List<V1StatefulSet>? FilteredStatefulSetList;
    string StatefulSetMessage = "";
    string AlertClass = "alert-info";
    string? Filter;
    string ScaleHeading = "";
    string StatefulSetNamespace = "";
    string StatefulSetName = "";
    int Replicas = 0;
    int PreviousReplicas = 0;
    int ItemCountAll = 0;
    int ItemCountFiltered = 0;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(NamespaceParam))
            {
                SelectedNamespace = NamespaceParam;
                await SetNamespaceCookie();
            }
            else
            {
                SelectedNamespace = await GetNamespaceCookie();
            }

            Namespaces = await NamespaceService.GetAllNamespaceNamesAsync();

            await StatefulSetListAll();

            _shouldRender = true;
        }
        catch
        {
            GetNamespacesError = true;
            StatefulSetListError = true;
        }
    }

    async Task OnSelect(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            SelectedNamespace = (e.Value.ToString() ?? string.Empty).Trim();

            if (!string.IsNullOrWhiteSpace(SelectedNamespace))
            {
                await SetNamespaceCookie();
                await StatefulSetListAll();
            }
        }
    }

    async Task SetNamespaceCookie()
    {
        await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "selectedNamespace", SelectedNamespace, DateTime.Now.AddDays(1));
    }

    async Task<string> GetNamespaceCookie()
    {
        try
        {
            var namespaceCookie = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "selectedNamespace");
            if (string.IsNullOrWhiteSpace(namespaceCookie))
            {
                namespaceCookie = "default";
            }
            return namespaceCookie;
        }
        catch
        {
            return "default";
        }
    }

    async Task StatefulSetListAll()
    {
        StatefulSetList = null;
        FilteredStatefulSetList = new List<V1StatefulSet>();
        StatefulSetList = await StatefulSetService.GetAllNamespacedStatefulSetsAsync(SelectedNamespace);
        
        if (StatefulSetList != null)
        {
            FilteredStatefulSetList = StatefulSetList.Items.ToList();
            ItemCountAll = StatefulSetList.Items.Count;
            ItemCountFiltered = FilteredStatefulSetList.Count;
        }
    }

    async Task FilterChange(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            Filter = (e.Value.ToString() ?? string.Empty).Trim();

            if (!string.IsNullOrWhiteSpace(Filter))
            {
                await FilterResults();
            }
        }
    }

    async Task ClearFilter()
    {
        Filter = "";
        await FilterResults();
    }

    async Task FilterResults()
    {
        if (string.IsNullOrWhiteSpace(Filter))
        {
            FilteredStatefulSetList = StatefulSetList?.Items.ToList();
            ItemCountFiltered = FilteredStatefulSetList?.Count ?? 0;
        }
        else
        {
            FilteredStatefulSetList = StatefulSetList?.Items.Where(d => d.Metadata.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase)).ToList();
            ItemCountFiltered = FilteredStatefulSetList?.Count ?? 0;
        }
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    async Task RestartNamespacedStatefulSetAsync()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to restart all StatefulSets in the {SelectedNamespace} namespace?");
        
        if (confirmed)
        {
            StatefulSetMessage = $"Restarting all StatefulSets in the {SelectedNamespace} namespace...";
            AlertClass = "alert-info";
            await InvokeAsync(() => { base.StateHasChanged(); });

            var success = await StatefulSetService.RestartNamespacedStatefulSetAsync(SelectedNamespace);

            if (success)
            {
                StatefulSetMessage = $"All StatefulSets in {SelectedNamespace} successfully restarted!";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(3000);
            }
            else
            {
                StatefulSetMessage = $"There was a problem restarting all StatefulSets in the {SelectedNamespace}!";
                AlertClass = "alert-danger";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(10000);
            }

            await StatefulSetListAll();
            StatefulSetMessage = "";
            AlertClass = "alert-info";
        }
    }

    async Task RestartStatefulSet(string name, string k8sNamespace)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to restart {name} in the {k8sNamespace} namespace?");

        if (confirmed)
        {
            StatefulSetMessage = $"Restarting {name} in the {k8sNamespace} namespace...";
            AlertClass = "alert-info";
            await InvokeAsync(() => { base.StateHasChanged(); });

            var success = await StatefulSetService.RestartStatefulSetAsync(name, k8sNamespace);

            if (success)
            {
                StatefulSetMessage = $"Successfully restarted {name} in the {k8sNamespace} namespace!";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(3000);
            }
            else
            {
                StatefulSetMessage = $"There was a problem restaring {name} in the {k8sNamespace} namespace!";
                AlertClass = "alert-danger";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(10000);
            }

            await StatefulSetListAll();
            StatefulSetMessage = "";
            AlertClass = "alert-info";
        }
    }

    async Task OpenScaleModal(string k8sNamespace, string StatefulSet, int? replicas)
    {
        ScaleHeading = $"{k8sNamespace} > {StatefulSet}";
        StatefulSetNamespace = k8sNamespace;
        StatefulSetName = StatefulSet;
        Replicas = replicas ?? 0;
        PreviousReplicas = Replicas;
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    async Task ScaleStatefulSet()
    {
        if (!string.IsNullOrWhiteSpace(StatefulSetNamespace) && !string.IsNullOrWhiteSpace(StatefulSetName) && Replicas > -1)
        {
            if (PreviousReplicas != Replicas)
            {
                var scaled = await StatefulSetService.ScaleStatefulSetAsync(StatefulSetName, Replicas, StatefulSetNamespace);
                if (scaled)
                {
                    var plural = Replicas == 1 ? "replica" : "replicas";
                    StatefulSetMessage = $"Successfully scaled {StatefulSetName} to {Replicas} {plural}.";
                    AlertClass = "alert-info";
                    await InvokeAsync(() => { base.StateHasChanged(); });
                    System.Threading.Thread.Sleep(5000);
                }
            }
        }

        await StatefulSetListAll();
        StatefulSetMessage = "";
        AlertClass = "alert-info";
        StatefulSetNamespace = "";
        StatefulSetName = "";
        Replicas = 0;
    }
}