@page "/deployments/{namespaceparam?}"

@using System
@using k8s.Models

@inject NamespaceService NamespaceService
@inject DeploymentService DeploymentService
@inject IJSRuntime JsRuntime

<h1>Deployments</h1>

@if (GetNamespacesError)
{
    <div class="alert alert-danger" role="alert">
        Unable to get namespaces. Please try again later.
    </div>
}
else
{
    <div class="row">
    @if (@ItemCountAll == @ItemCountFiltered)
    {
        <h6>Items: @ItemCountAll</h6>
    }
    else
    {
        <h6>Filtered: @ItemCountFiltered / @ItemCountAll</h6>
    }
    </div>
    <div class="form-group row mb-3">
        <div class="col-sm-4">
            <label for="namespaceSelect" class="form-label">Select a Namespace</label>
            <select class="form-select" id="namespaceSelect" @onchange="@OnSelect">
            @foreach (var ns in Namespaces)
            {
                @if (@ns.Equals(@SelectedNamespace))
                {
                                <option value=@ns selected>@ns</option>
                }
                else
                {
                                <option value=@ns>@ns</option>
                }
            }
            </select>
        </div>
        <div class="col-sm-2 offset-sm-4">
            <AuthorizeView Policy="RequireEditorRole" Context="auth">
                <button class="btn btn-outline-dark btn-sm" @onclick="() => RestartNamespacedDeploymentAsync()">Restart All @SelectedNamespace.ToUpper() Deployments</button>
            </AuthorizeView>
        </div>
    </div>
    <div class="form-group row mb-3">
        <div class="col-sm-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search..." aria-label="Filter" aria-describedby="button-clear" @bind-value="Filter" @oninput="@FilterChange">
                <button class="btn btn-outline-secondary" type="button" id="button-clear"@onclick="@ClearFilter">Clear</button>
            </div>
        </div>
    </div>
}
@if (DeploymentListError)
{
    <div class="alert alert-danger" role="alert">
        Unable to list deployments. Please try again later.
    </div>
}
else
{
    @if (!String.IsNullOrWhiteSpace(DeploymentMessage))
    {
        <div class="alert @AlertClass" role="alert">
            @DeploymentMessage
        </div>
    }
    else if (@DeploymentList != null && DeploymentList.Items != null && @DeploymentList.Items.Any())
    {
        <TableTemplate Items="FilteredDeploymentList" TItem="V1Deployment" TableHeaderClass="thead-light" TableClass="mb-5">
            <TableHeader>
                <th>
                    <div class="form-group row">
                        <div class="col-xl-2 d-none d-xl-block">
                            <label class="form-label">Name</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Replicas<br /><span class="small">(Spec)</span></label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Replicas<br /><span class="small">(Status)</span></label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Pods<br /><span class="small">(Ready / Total)</span></label>
                        </div>
                        <div class="col-xl-2 d-none d-xl-block">
                            <label class="form-label">Created</label>
                        </div>
                        <div class="col-xl-3 d-none d-xl-block">
                            <label class="form-label">Conditions</label>
                        </div>
                    </div>
                </th>
            </TableHeader>
            <RowTemplate>
                <td>
                    <div class="form-group row">
                        <div class="col-xl-2">
                            <label class="form-label d-xl-none"><b>Name:</b></label>
                            <span id="@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Metadata.Name</span>
                            <div class="my-1">
                                <button class="btn btn-outline-dark btn-sm me-1" @onclick="() => RestartDeployment(context.Metadata.Name, context.Metadata.NamespaceProperty)">Restart</button>
                                <AuthorizeView Policy="RequireEditorRole" Context="auth">
                                    <button type="button" class="btn btn-outline-dark btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#scaleModal" @onclick="() => OpenScaleModal(context.Metadata.NamespaceProperty, context.Metadata.Name, context.Spec.Replicas)">Scale</button>
                                </AuthorizeView>
                            </div>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Replicas <span class="small">(Spec)</span>:</b></label>
                            <span id="spec-replicas-@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Spec.Replicas</span>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Replicas <span class="small">(Status)</span>:</b></label>
                            <span id="status-replicas-@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Status.Replicas</span>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Pods <span class="small">(Ready / Total)</span>:</b></label>
                            <span id="ready-replicas-@context.Metadata.Name.ToString()" class="form-item small">@context.Status.ReadyReplicas / @context.Status.Replicas</span>
                        </div>
                        <div class="col-xl-2">
                            <label class="form-label d-xl-none"><b>Created:</b></label>
                            <span id="created-@context.Metadata.Name.Replace(".","-")" class="form-item small">@context.Metadata.CreationTimestamp</span>
                        </div>
                        <div class="col-xl-3">
                            <label class="form-label d-xl-none"><b>Conditions:</b></label>
                            <span id="conditions-@context.Metadata.Name.Replace(".","-")" class="form-item small">
                            @foreach (var condition in context.Status.Conditions.OrderBy(c => c.Type))
                            {
                                <span class="ms-1">@condition.Type</span>
                            }
                            </span>
                        </div>
                    </div>
                </td>
            </RowTemplate>
        </TableTemplate>
        <div class="modal fade" id="scaleModal" tabindex="-1" aria-labelledby="scaleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="scaleModalLabel">@ScaleHeading</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="replicas">Replicas</label>
                            <input type="number" min="0" id="replicas" class="form-control" @bind-value="Replicas" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-link" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => ScaleDeployment()">Save</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (DeploymentList == null)
    {
        <div class="alert alert-info" role="alert">
            Loading Deployments...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No Deployments found in the @SelectedNamespace namespace
        </div>
    }
}

@code {
    [Parameter]
    public string? NamespaceParam { get; set; }

    bool GetNamespacesError;
    bool DeploymentListError;
    bool _shouldRender;
    IEnumerable<string> Namespaces = Array.Empty<string>();
    string SelectedNamespace = string.Empty;
    V1DeploymentList? DeploymentList;
    List<V1Deployment>? FilteredDeploymentList;
    string DeploymentMessage = "";
    string AlertClass = "alert-info";
    string? Filter;
    string ScaleHeading = "";
    string DeploymentNamespace = "";
    string DeploymentName = "";
    int Replicas = 0;
    int PreviousReplicas = 0;
    int ItemCountAll = 0;
    int ItemCountFiltered = 0;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(NamespaceParam))
            {
                SelectedNamespace = NamespaceParam;
                await SetNamespaceCookie();
            }
            else
            {
                SelectedNamespace = await GetNamespaceCookie();
            }

            Namespaces = await NamespaceService.GetAllNamespaceNamesAsync();

            await DeploymentListAll();

            _shouldRender = true;
        }
        catch
        {
            GetNamespacesError = true;
            DeploymentListError = true;
        }
    }

    async Task OnSelect(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            SelectedNamespace = (e.Value.ToString() ?? string.Empty).Trim();

            if (!string.IsNullOrWhiteSpace(SelectedNamespace))
            {
                await SetNamespaceCookie();
                await DeploymentListAll();
            }
        }
    }

    async Task SetNamespaceCookie()
    {
        await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "selectedNamespace", SelectedNamespace, DateTime.Now.AddDays(1));
    }

    async Task<string> GetNamespaceCookie()
    {
        try
        {
            var namespaceCookie = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "selectedNamespace");
            if (string.IsNullOrWhiteSpace(namespaceCookie))
            {
                namespaceCookie = "default";
            }
            return namespaceCookie;
        }
        catch
        {
            return "default";
        }
    }

    async Task DeploymentListAll()
    {
        DeploymentList = null;
        FilteredDeploymentList = new List<V1Deployment>();
        DeploymentList = await DeploymentService.GetAllNamespacedDeploymentsAsync(SelectedNamespace);
        
        if (DeploymentList != null)
        {
            FilteredDeploymentList = DeploymentList.Items.ToList();
            ItemCountAll = DeploymentList.Items.Count;
            ItemCountFiltered = FilteredDeploymentList.Count;
        }
    }

    async Task FilterChange(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            Filter = (e.Value.ToString() ?? string.Empty).Trim();

            if (!string.IsNullOrWhiteSpace(Filter))
            {
                await FilterResults();
            }
        }
    }

    async Task ClearFilter()
    {
        Filter = "";
        await FilterResults();
    }

    async Task FilterResults()
    {
        if (string.IsNullOrWhiteSpace(Filter))
        {
            FilteredDeploymentList = DeploymentList?.Items.ToList();
            ItemCountFiltered = FilteredDeploymentList?.Count ?? 0;
        }
        else
        {
            FilteredDeploymentList = DeploymentList?.Items.Where(d => d.Metadata.Name.Contains(Filter,
            StringComparison.OrdinalIgnoreCase)).ToList();
            ItemCountFiltered = FilteredDeploymentList?.Count ?? 0;
        }
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    async Task RestartNamespacedDeploymentAsync()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to restart all Deployments in the {SelectedNamespace} namespace?");

        if (confirmed)
        {
            DeploymentMessage = $"Restarting all deployments in the {SelectedNamespace} namespace...";
            AlertClass = "alert-info";
            await InvokeAsync(() => { base.StateHasChanged(); });

            var success = await DeploymentService.RestartNamespacedDeploymentAsync(SelectedNamespace);

            if (success)
            {
                DeploymentMessage = $"All deployments in {SelectedNamespace} successfully restarted!";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(3000);
            }
            else
            {
                DeploymentMessage = $"There was a problem restarting all deployments in the {SelectedNamespace}!";
                AlertClass = "alert-danger";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(10000);
            }

            await DeploymentListAll();
            DeploymentMessage = "";
            AlertClass = "alert-info";
        }
    }

    async Task RestartDeployment(string name, string k8sNamespace)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to restart {name} in the {k8sNamespace} namespace?");

        if (confirmed)
        {
            DeploymentMessage = $"Restarting {name} in the {k8sNamespace} namespace...";
            AlertClass = "alert-info";
            await InvokeAsync(() => { base.StateHasChanged(); });

            var success = await DeploymentService.RestartDeploymentAsync(name, k8sNamespace);

            if (success)
            {
                DeploymentMessage = $"Successfully restarted {name} in the {k8sNamespace} namespace!";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(3000);
            }
            else
            {
                DeploymentMessage = $"There was a problem restaring {name} in the {k8sNamespace} namespace!";
                AlertClass = "alert-danger";
                await InvokeAsync(() => { base.StateHasChanged(); });
                System.Threading.Thread.Sleep(10000);
            }

            await DeploymentListAll();
            DeploymentMessage = "";
            AlertClass = "alert-info";
        }
    }

    async Task OpenScaleModal(string k8sNamespace, string deployment, int? replicas)
    {
        ScaleHeading = $"{k8sNamespace} > {deployment}";
        DeploymentNamespace = k8sNamespace;
        DeploymentName = deployment;
        Replicas = replicas ?? 0;
        PreviousReplicas = Replicas;
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    async Task ScaleDeployment()
    {
        if (!string.IsNullOrWhiteSpace(DeploymentNamespace) && !string.IsNullOrWhiteSpace(DeploymentName) && Replicas > -1)
        {
            if (PreviousReplicas != Replicas)
            {
                var scaled = await DeploymentService.ScaleDeploymentAsync(DeploymentName, Replicas, DeploymentNamespace);
                if (scaled)
                {
                    var plural = Replicas == 1 ? "replica" : "replicas";
                    DeploymentMessage = $"Successfully scaled {DeploymentName} to {Replicas} {plural}.";
                    AlertClass = "alert-info";
                    await InvokeAsync(() => { base.StateHasChanged(); });
                    System.Threading.Thread.Sleep(5000);
                }
            }
        }

        await DeploymentListAll();
        DeploymentMessage = "";
        AlertClass = "alert-info";
        DeploymentNamespace = "";
        DeploymentName = "";
        Replicas = 0;
    }
}