@page "/pods/{namespaceparam?}/{filterparam?}"

@using System
@using System.IO

@inject NamespaceService NamespaceService
@inject PodService PodService
@inject LogService LogService
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigator
@inject IAuthorizationService AuthorizationService

<h1>Pods</h1>

@if (GetNamespacesError)
{
    <div class="alert alert-danger" role="alert">
        Unable to get namespaces. Please try again later.
    </div>
}
else
{
    <div class="row">
        @if (@ItemCountAll == @ItemCountFiltered)
        {
            <h6>Items: @ItemCountAll</h6>
        }
        else
        {
            <h6>Filtered: @ItemCountFiltered / @ItemCountAll</h6>
        }
    </div>
    <div class="form-group row mb-3">
        <div class="col-sm-4">
            <label for="namespaceSelect" class="form-label">Select a Namespace</label>
            <select class="form-select" id="namespaceSelect" @onchange="@OnNamespaceSelect">
                @foreach (var ns in Namespaces)
                {
                    @if (@ns.Equals(@SelectedNamespace))
                    {
                        <option value=@ns selected>@ns</option>
                    }
                    else
                    {
                        <option value=@ns>@ns</option>
                    }
                }
            </select>
        </div>
        <div class="col-sm-2 offset-sm-4">
            <button class="btn btn-outline-dark btn-sm" @onclick="() => GetPodCsv()">Download Pod List</button>
        </div>
        <div class="col-sm-2">
            <label for="logRows" class="form-label">Log Rows</label>
            <input type="number" class="form-control" id="logRows" @bind-value="LogRows">
        </div>
    </div>
    <div class="form-group row mb-3">
        <div class="col-sm-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search..." aria-label="Filter"
                aria-describedby="button-clear" @bind-value="Filter" @oninput="@FilterChange">
                <button class="btn btn-outline-secondary" type="button" id="button-clear"
                @onclick="@ClearFilter">Clear</button>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-check">
                <input class="form-check-input" id="SearchPodNameCheckbox" type="checkbox" checked="@SearchPodName"
                @bind-value="SearchPodName" @onclick="@SearchPodNameChange">
                <label class="form-check-label" for="SearchPodNameCheckbox">Search Pod Names</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" id="SearchContainerNameCheckbox" type="checkbox"
                checked="@SearchContainerName" @bind-value="SearchContainerName" @onclick="@SearchContainerNameChange">
                <label class="form-check-label" for="SearchContainerNameCheckbox">Search Container Names</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" id="SearchInitContainerNameCheckbox" type="checkbox"
                checked="@SearchInitContainerName" @bind-value="SearchInitContainerName"
                @onclick="@SearchInitContainerNameChange">
                <label class="form-check-label" for="SearchInitContainerNameCheckbox">Search Init Container Names</label>
            </div>
        </div>
        <div class="col-sm-4">
            <label for="podStatusSelect" class="form-label">Pod Status</label>
            <select class="form-select" id="podStatusSelect" @onchange="@OnPodStatusSelect">
                @foreach (var status in Helper.ReturnPodStatusDictionary())
                {
                    @if (@status.Value.Equals(@PodStatus))
                    {
                        <option value=@status.Value selected>@status.Key</option>
                    }
                    else
                    {
                        <option value=@status.Value>@status.Key</option>
                    }
                }
            </select>
        </div>
    </div>
}
@if (GetPodsError)
{
    <div class="alert alert-danger" role="alert">
        Unable to get pods. Please try again later.
    </div>
}
else
{
    @if (@NamespacedPods != null && @NamespacedPods.Any())
    {
        <TableTemplate Items="FilteredPods" TItem="Pod" TableHeaderClass="thead-light" TableClass="mb-5">
            <TableHeader>
                <th>
                    <div class="form-group row">
                        <div class="col-xl-4 d-none d-xl-block">
                            <label class="form-label">Pod</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Component</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Part Of</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Version</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Status</label>
                        </div>
                        <div class="col-xl-1 d-none d-xl-block">
                            <label class="form-label">Created</label>
                        </div>
                    </div>
                </th>
            </TableHeader>
            <RowTemplate>
                @if(context != null && context.PodName != null)
                {
                <td>
                    <div class="form-group row">
                        <div class="col-xl-4">
                            <span id="name-@context.PodName.Replace(".","-")" class="form-item h5">
                                @(string.IsNullOrWhiteSpace(context.Name) ? context.PodName : context.Name)
                            </span>
                            @if (!string.IsNullOrWhiteSpace(context.Name))
                            {
                                <span class="small ms-2">(@context.PodName)</span>
                            }
                            <button type="button" class="btn btn-link btn-copy js-tooltip" data-toggle="tooltip"
                        data-placement="top" title="Copy link to clipboard"
                        @onclick="() => CopyTextToClipboard(context.PodName ?? string.Empty)">
                                <span class="oi oi-link-intact" aria-hidden="true"></span>
                            </button>
                        </div>
                        <div class="col-xl-1">
                            @if (!string.IsNullOrWhiteSpace(context.Component))
                            {
                                <label class="form-label d-xl-none"><b>Component:</b></label>
                                <span id="component-@context.PodName.Replace(".","-")"
                        class="form-item small">@context.Component</span>
                            }
                        </div>
                        <div class="col-xl-1">
                            @if (!string.IsNullOrWhiteSpace(context.PartOf))
                            {
                                <label class="form-label d-xl-none"><b>Part Of:</b></label>
                                <span id="part-of-@context.PodName.Replace(".","-")" class="form-item small">@context.PartOf</span>
                            }
                        </div>
                        <div class="col-xl-1">
                            @if (!string.IsNullOrWhiteSpace(context.Version))
                            {
                                <label class="form-label d-xl-none"><b>Version:</b></label>
                                <span id="version-@context.PodName.Replace(".","-")" class="form-item small">@context.Version</span>
                            }
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Status:</b></label>
                            <span id="status-@context.PodName.Replace(".","-")"
                        class="form-item small">@context.PodStatus</span>
                        </div>
                        <div class="col-xl-1">
                            <label class="form-label d-xl-none"><b>Created:</b></label>
                            <span id="created-@context.PodName.Replace(".","-")" class="form-item small">
                                @if (context.PodCreated.HasValue)
                                {
                                    @context.PodCreated.Value.ToString("u")
                                    ;
                                }
                            </span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-8 col-lg-12">
                            @if ((context.Containers != null && context.Containers.Any()) || (context.InitContainers != null &&
                        context.InitContainers.Any()))
                            {
                                <button class="btn btn-outline-dark btn-sm m-2 collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.PodName.Replace(".","-")-collapseMoreDetails" aria-expanded="false"
                        aria-controls="collapseMoreDetails">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> More Details</span>
                                </button>
                            }

                            @if (context.Labels != null && context.Labels.Any())
                            {
                                <button class="btn btn-outline-dark btn-sm m-2 collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.PodName.Replace(".","-")-collapseLabels" aria-expanded="false"
                        aria-controls="collapseLabels">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Pod Labels</span>
                                </button>
                            }

                            @if (context.Annotations != null && context.Annotations.Any())
                            {
                                <button class="btn btn-outline-dark btn-sm m-2 collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.PodName.Replace(".","-")-collapseAnnotations" aria-expanded="false"
                        aria-controls="collapseAnnotations">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Pod Annotations</span>
                                </button>
                            }

                            @if (context.Affinity != null || (context.Tolerations != null && context.Tolerations.Any()))
                            {
                                <button class="btn btn-outline-dark btn-sm m-2 collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.PodName.Replace(".","-")-collapseAffinityAndTolerations"
                        aria-expanded="false" aria-controls="collapseAffinityAndTolerations">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Affinity & Tolerations</span>
                                </button>
                            }

                            @if (context.PodVolumes != null && context.PodVolumes.Any())
                            {
                                <button class="btn btn-outline-dark btn-sm m-2 collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.PodName.Replace(".","-")-collapsePodVolumes" aria-expanded="false"
                        aria-controls="collapsePodVolumes">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Pod Volumes</span>
                                </button>
                            }

                            @if (context.Events != null && context.Events.Any())
                            {
                                <button class="btn btn-outline-dark btn-sm m-2 collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@context.PodName.Replace(".","-")-collapseEvents" aria-expanded="false"
                        aria-controls="collapseEvents">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Events</span>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="row mb-2">
                        @if ((context.Containers != null && context.Containers.Any()) || (context.InitContainers != null &&
                    context.InitContainers.Any()))
                        {
                            <div class="collapse col-sm-12" id="@context.PodName.Replace(".","-")-collapseMoreDetails">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="form-label"><b>Node Name</b></label>
                                        <p>@context.NodeName</p>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label"><b>Node IP</b></label>
                                        <p>@context.HostIP</p>
                                    </div>
                                    <div class="col-md-4">
                                        @if (@context.PodIPs != null && context.PodIPs.Any())
                                        {
                                            @if (@context.PodIPs.Count > 1)
                                            {
                                                <label class="form-label"><b>Pod IPs</b></label>
                                                <div id="ip-@context.PodName.Replace(".","-")" class="form-item">
                                                    <ul>
                                                        @foreach (var ip in context.PodIPs)
                                                        {
                                                            <li>@ip</li>
                                                        }
                                                    </ul>
                                                </div>
                                            }
                                            else if (@context.PodIPs.Count == 1)
                                            {
                                                <label class="form-label"><b>Pod IP</b></label>
                                                <div id="ip-@context.PodName.Replace(".","-")" class="form-item">@context.PodIPs[0]</div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-warning">No Pod IP address was assigned.</div>
                                            }
                                        }
                                    </div>
                                </div>
                                @if (context.InitContainers != null && context.InitContainers.Any())
                                {
                                    <h5>Init Containers</h5>
                                    <TableTemplate
                        Items="@context.InitContainers.Select(s => new { s?.ContainerStatus?.Name, s?.ContainerStatus?.Started, s?.ContainerStatus?.Ready, s?.ContainerStatus?.RestartCount, s?.ContainerStatus?.Image, s?.ContainerStatus?.ImageID, s?.ContainerStatus?.LastState, s?.Container?.Env, s?.Container?.EnvFrom, s?.Container?.VolumeMounts }).OrderBy(s => s.Name)"
                        TableClass="table-sm table-striped">
                                        <RowTemplate Context="statusContext">
                                            @if (statusContext != null)
                                            {
                        <td>
                            <div class="form-group container-fluid row mb-1">
                                <div class="col-xl-2">
                                    <div class="mb-2">
                                        <label
                            for="name-@context.PodName.Replace(".","-")-@statusContext.Name"><b>Container:</b></label>
                                        <span id="name-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.Name</span>
                                    </div>
                                    <div class="row mb-2">
                                        <button class="btn btn-outline-dark btn-sm"
                            @onclick="() => GetLogs(context.Namespace ?? string.Empty, context.PodName ?? string.Empty, statusContext.Name ?? string.Empty)">Logs</button>
                                    </div>
                                    @if ((@statusContext.Env != null && statusContext.Env.Any()) || (@statusContext.EnvFrom != null && statusContext.EnvFrom.Any()))
                                    {
                                    <div class="row mb-2">
                                        <button type="button" class="btn btn-outline-dark btn-sm" data-bs-toggle="modal" data-bs-target="#envVarModal" @onclick="() => GetEnvironmentVariables(context.Namespace ?? string.Empty, context.PodName, statusContext.Name ?? string.Empty)">
                                        View Environment Variables
                                        </button>
                                    </div>
                                    }
                                    @if ((@statusContext.VolumeMounts != null && statusContext.VolumeMounts.Any()))
                                    {
                                    <div class="row mb-2">
                                        <button class="btn btn-outline-dark btn-sm collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@context.PodName.Replace(".","-")-@statusContext.Name-volume-mounts" aria-expanded="false" aria-controls="collapseEvents">
                                        <span><span class="show">Show</span><span class="hide">Hide</span> Volume Mounts</span>
                                        </button>
                                    </div>
                                    }
                                </div>
                                <div class="col-xl-1">
                                    <div class="small mb-2">
                                        <label
                            for="started-@context.PodName.Replace(".","-")-@statusContext.Name"><b>Started:</b></label>
                                        <span id="started-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.Started</span>
                                    </div>
                                    <div class="small mb-2">
                                        <label><b>Ready:</b></label>
                                        <span id="ready-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.Ready</span>
                                    </div>
                                    <div class="small mb-2">
                                        <label><b>Restart Count:</b></label>
                                        <span id="restart-count-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.RestartCount</span>
                                    </div>
                                </div>
                                <div class="col-xl-5">
                                        @if (statusContext?.LastState?.Running != null || statusContext?.LastState?.Waiting != null || statusContext?.LastState?.Terminated != null)
                                        {
                        <label class="form-label small"><b>Last State</b></label>
                        <pre>@statusContext.LastState.ToYaml()</pre>
                                        }
                </div>
                @if (statusContext != null && statusContext.Image != null)
                {
                <div class="col-xl-4">
                    <div class="small mb-2">
                        <label><b>Image:</b></label>
                        <span id="image-@context.PodName.Replace(".","-")-@statusContext.Name" class="form-item">
                            @if (statusContext.ImageID?.Split('@').Length > 1)
                            {
                                @statusContext.ImageID?.Split('@')[0]
                            }
                            else
                            {
                                @statusContext.Image?.Split(':')[0]
                            }
                        </span>
                    </div>
                    <div class="small mb-2">
                        <label><b>Tag:</b></label>
                        <span id="tag-@context.PodName.Replace(".","-")-@statusContext.Name" class="form-item">
                            @if (statusContext != null && statusContext.Image != null && statusContext.Image.StartsWith("sha"))
                            {
                                @statusContext.Image
                            }
                            elseif (statusContext != null)
                            {
                                @statusContext?.Image?.Split(':')[1]
                            }
                        </span>
                    </div>
                    <div class="small mb-2">
                        <label><b>Image
                                ID:</b></label>
                        <span id="image-id-@context.PodName.Replace(".","-")-@statusContext?.Name" class="form-item">
                            @if (statusContext?.ImageID?.Split('@').Length > 1)
                            {
                                @statusContext.ImageID?.Split('@')[1]
                            }
                        </span>
                    </div>
                </div>
                }
            </div>
            <div id="@context.PodName.Replace(".","-")-@statusContext?.Name-volume-mounts" class="collapse container-fluid row mb-1">
                <TableTemplate Items="@statusContext?.VolumeMounts" TableClass="table-sm table-striped">
                    <TableHeader>
                        <th>Mounts</th>
                    </TableHeader>
                    <RowTemplate Context="mountsContext">
                        <td>
                            <b>Volume:</b> @mountsContext.Name
                            @if(mountsContext.ReadOnlyProperty ?? false)
                            {
                                <span class="badge rounded-pill bg-dark text-light ms-1">Read Only</span>
                            }
                            else
                            {
                                <span class="badge rounded-pill bg-dark text-light ms-1">Read/Write</span>
                            }
                            <div>
                                <code>@mountsContext.MountPath</code>
                            </div>
                        </td>
                    </RowTemplate>
                </TableTemplate>
            </div>
        </td>
                                }
    </RowTemplate>
</TableTemplate>
                                }
                                @if (context.Containers != null && context.Containers.Any())
                                {
                <h5>Containers</h5>
                <TableTemplate
    Items="@context.Containers.Select(s => new { s?.ContainerStatus?.Name, s?.ContainerStatus?.Started, s?.ContainerStatus?.Ready, s?.ContainerStatus?.RestartCount, s?.ContainerStatus?.Image, s?.ContainerStatus?.ImageID, s?.ContainerStatus?.LastState, s?.Container?.Env, s?.Container?.EnvFrom, s?.Container?.VolumeMounts, s?.Container?.Ports }).OrderBy(s => s.Name)"
    TableClass="table-sm table-striped">
                    <RowTemplate Context="statusContext">
                        @if (statusContext != null)
                        {
                        <td>
                            <div class="form-group container-fluid row mb-1">
                                <div class="col-xl-2">
                                    <div class="mb-2">
                                        <label
                            for="name-@context.PodName.Replace(".","-")-@statusContext.Name"><b>Container:</b></label>
                                        <span id="name-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.Name</span>
                                    </div>
                                    <div class="row mb-2">
                                        <button class="btn btn-outline-dark btn-sm"
                            @onclick="() => GetLogs(context?.Namespace ?? string.Empty, context?.PodName ?? string.Empty, statusContext?.Name ?? string.Empty)">Logs</button>
                                    </div>
                                    @if (context != null && (@statusContext.Env != null && statusContext.Env.Any()) || (@statusContext.EnvFrom != null && statusContext.EnvFrom.Any()))
                                    {
                                    <div class="row mb-2">
                                        <button type="button" class="btn btn-outline-dark btn-sm" data-bs-toggle="modal" data-bs-target="#envVarModal" @onclick="() => GetEnvironmentVariables(context?.Namespace ?? string.Empty, context?.PodName ?? string.Empty, statusContext?.Name ?? string.Empty)">
                                        View Environment Variables
                                        </button>
                                    </div>
                                    }
                                    @if (context != null && (@statusContext.VolumeMounts != null && statusContext.VolumeMounts.Any()))
                                    {
                                    <div class="row mb-2">
                                        <button class="btn btn-outline-dark btn-sm collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@context.PodName.Replace(".","-")-@statusContext.Name-volume-mounts" aria-expanded="false" aria-controls="collapseEvents">
                                        <span><span class="show">Show</span><span class="hide">Hide</span> Volume Mounts</span>
                                        </button>
                                    </div>
                                    }
                                    @if (Helper.ShowMetricsDownload() && context != null && statusContext != null && @statusContext.Ports != null && @context.Name != null && @context.Namespace != null && @statusContext.Ports.Any(p => p.Name != null && p.Name.Equals(Helper.MetricsPortName())))
                                    {
                                    <div class="row mb-2">
                                        <button class="btn btn-outline-dark btn-sm"
                                            @onclick="() => GetMetrics(context.Namespace, context.Name, statusContext.Ports.FirstOrDefault(p => p.Name.Equals(Helper.MetricsPortName()))?.ContainerPort ?? 0)">Metrics</button>
                                    </div>
                                    }
                                </div>
                                <div class="col-xl-1">
                                    @if (context != null && statusContext != null)
                                    {
                                    <div class="small mb-2">
                                        <label
                            for="started-@context.PodName.Replace(".","-")-@statusContext.Name"><b>Started:</b></label>
                                        <span id="started-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.Started</span>
                                    </div>
                                    <div class="small mb-2">
                                        <label><b>Ready:</b></label>
                                        <span id="ready-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.Ready</span>
                                    </div>
                                    <div class="small mb-2">
                                        <label><b>Restart Count:</b></label>
                                        <span id="restart-count-@context.PodName.Replace(".","-")-@statusContext.Name"
                            class="form-item">@statusContext.RestartCount</span>
                                    </div>
                                    }
                                </div>
                                <div class="col-xl-5">
                                        @if (statusContext?.LastState?.Running != null || statusContext?.LastState?.Waiting != null || statusContext?.LastState?.Terminated != null)
                                        {
                        <label class="form-label small"><b>Last State</b></label>
                        <pre>@statusContext.LastState.ToYaml()</pre>
                                        }
                </div>
                @if (context != null && statusContext != null && statusContext.Image != null)
                {
                <div class="col-xl-4">
                    <div class="small mb-2">
                        <label><b>Image:</b></label>
                        <span id="image-@context.PodName.Replace(".","-")-@statusContext.Name" class="form-item">
                            @if (statusContext.ImageID?.Split('@').Length > 1)
                            {
                                @statusContext.ImageID?.Split('@')[0]
                            }
                            else
                            {
                                @statusContext.Image?.Split(':')[0]
                            }
                        </span>
                    </div>
                    <div class="small mb-2">
                        <label><b>Tag:</b></label>
                        <span id="tag-@context.PodName.Replace(".","-")-@statusContext.Name" class="form-item">
                            @if (statusContext.Image != null && statusContext.Image.StartsWith("sha"))
                            {
                                @statusContext.Image
                            }
                            else
                            {
                                @statusContext.Image?.Split(':')[1]
                            }
                        </span>
                    </div>
                    <div class="small mb-2">
                        <label><b>Image ID:</b></label>
                        <span id="image-id-@context.PodName.Replace(".","-")-@statusContext.Name" class="form-item">
                            @if (statusContext.ImageID?.Split('@').Length > 1)
                            {
                                @statusContext.ImageID?.Split('@')[1]
                            }
                        </span>
                    </div>
                </div>
                }
            </div>
            @if (context != null && statusContext != null)
            {
            <div id="@context.PodName.Replace(".","-")-@statusContext.Name-volume-mounts" class="collapse container-fluid row mb-1">
                <TableTemplate Items="@statusContext.VolumeMounts" TableClass="table-sm table-striped">
                    <TableHeader>
                        <th>Mounts</th>
                    </TableHeader>
                    <RowTemplate Context="mountsContext">
                        <td>
                            <b>Volume:</b> @mountsContext.Name
                            @if(mountsContext.ReadOnlyProperty ?? false)
                            {
                                <span class="badge rounded-pill bg-dark text-light ms-1">Read Only</span>
                            }
                            else
                            {
                                <span class="badge rounded-pill bg-dark text-light ms-1">Read/Write</span>
                            }
                            <div>
                                <code>@mountsContext.MountPath</code>
                            </div>
                        </td>
                    </RowTemplate>
                </TableTemplate>
            </div>
            }
        </td>
                        }
    </RowTemplate>
</TableTemplate>
                                }
            </div>
                        }
        </div>
        <div class="row mb-2">
                        @if (context.Labels != null && context.Labels.Any())
                        {
                <div class="collapse col-sm-12" id="@context.PodName.Replace(".","-")-collapseLabels">
                    <TableTemplate Items="@context.Labels" TableClass="table-sm table-striped">
                        <TableHeader>
                            <th colspan="2">Labels</th>
                        </TableHeader>
                        <RowTemplate Context="labelsContext">
                            <td>@labelsContext.Key</td>
                            <td>@labelsContext.Value</td>
                        </RowTemplate>
                    </TableTemplate>
                </div>
                        }
        </div>
        <div class="row mb-2">
                        @if (context.Annotations != null && context.Annotations.Any())
                        {
                <div class="collapse col-sm-12" id="@context.PodName.Replace(".","-")-collapseAnnotations">
                    <TableTemplate Items="@context.Annotations" TableClass="table-sm table-striped">
                        <TableHeader>
                            <th colspan="2">Annotations</th>
                        </TableHeader>
                        <RowTemplate Context="annotationsContext">
                            <td>@annotationsContext.Key</td>
                            <td>@annotationsContext.Value</td>
                        </RowTemplate>
                    </TableTemplate>
                </div>
                        }
        </div>
        <div class="row mb-2">
                        @if (context.Affinity != null || (context.Tolerations != null && context.Tolerations.Any()))
                        {
                <div class="collapse col-sm-12" id="@context.PodName.Replace(".","-")-collapseAffinityAndTolerations">
                                @if (context.Affinity != null)
                                {
                        <h5>Affinity</h5>
                        <pre>@context.Affinity.ToYaml()</pre>
                                }
                                @if (context.Tolerations != null && context.Tolerations.Any())
                                {
                        <h5>Tolerations</h5>
                        <TableTemplate Items="@context.Tolerations" TableClass="table-sm table-striped">
                            <TableHeader>
                                <th>Key</th>
                                <th>Operator</th>
                                <th>Value</th>
                                <th>Effect</th>
                                <th>Seconds</th>
                            </TableHeader>
                            <RowTemplate Context="tolerationsContext">
                                <td>@tolerationsContext.Key</td>
                                <td>@tolerationsContext.OperatorProperty</td>
                                <td>@tolerationsContext.Value</td>
                                <td>@tolerationsContext.Effect</td>
                                <td>@tolerationsContext.TolerationSeconds</td>
                            </RowTemplate>
                        </TableTemplate>
                                }
                </div>
                        }
        </div>
        <div class="row mb-2">
                        @if (context.PodVolumes != null && context.PodVolumes.Any())
                        {
                <div class="collapse col-sm-12" id="@context.PodName.Replace(".","-")-collapsePodVolumes">
                    <TableTemplate Items="@context.PodVolumes" TableClass="table-sm table-striped">
                        <TableHeader>
                            <th>Volumes</th>
                        </TableHeader>
                        <RowTemplate Context="podVolumesContext">
                            <td>@podVolumesContext</td>
                        </RowTemplate>
                    </TableTemplate>
                </div>
                        }
        </div>
        <div class="row mb-2">
                        @if (context.Events != null && context.Events.Any())
                        {
                <div class="collapse col-sm-12" id="@context.PodName.Replace(".","-")-collapseEvents">
                    <TableTemplate Items="@context.Events" TableClass="table-sm table-striped">
                        <TableHeader>
                            <th>Events</th>
                        </TableHeader>
                        <RowTemplate Context="eventsContext">
                            <td>
                                <div>
                                    <b>@eventsContext.Message</b>
                                </div>
                                            @if (!string.IsNullOrWhiteSpace(@eventsContext.Source?.Component) ||
                    !string.IsNullOrWhiteSpace(@eventsContext.Source?.Host))
                                            {
                        <div>
                            <label><b>Source:</b></label>&nbsp;<span class="form-item">@eventsContext.Source?.Component
                                            @eventsContext.Source?.Host</span>
                        </div>
                                            }
                                @if (eventsContext.Count != null)
                                            {
                        <div>
                            <label><b>Count:</b></label>&nbsp;<span class="form-item">@eventsContext.Count</span>
                        </div>
                                            }
                                @if (!string.IsNullOrWhiteSpace(eventsContext.InvolvedObject?.FieldPath))
                                            {
                        <div>
                            <label><b>Involved Object:</b></label>&nbsp;<span
                            class="form-item">@eventsContext.InvolvedObject.FieldPath</span>
                        </div>
                                            }
                                @if (eventsContext.LastTimestamp != null)
                                            {
                        <div>
                            <label><b>Last Seen:</b></label>&nbsp;<span
                            class="form-item">@eventsContext.LastTimestamp</span>
                        </div>
                                            }
                </td>
            </RowTemplate>
        </TableTemplate>
    </div>
                        }
        </div>
        </td>
        }
        </RowTemplate>
        </TableTemplate>
<div class="modal fade" id="envVarModal" tabindex="-1" aria-labelledby="envVarModalLabel" aria-hidden="true">
<div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="envVarModalLabel">@EnvVarHeading</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
            @if (EnvironmentVariables != null && EnvironmentVariables.Any())
            {
                
                <TableTemplate Items="EnvironmentVariables" TableClass="table-sm table-striped">
                    <TableHeader>
                        <th colspan="3">Environment Variables</th>
                    </TableHeader>
                    <RowTemplate Context="envVarContext">
                        <td>@envVarContext.Key</td>
                        <td>@envVarContext.Value</td>
                        <td>(@envVarContext.Type)</td>
                    </RowTemplate>
                </TableTemplate>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    @EnvVarMessage
                </div>
            }
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
    </div>
    </div>
</div>
</div>
    }
    else if (NamespacedPods == null)
    {
        <div class="alert alert-info" role="alert">
            Loading Pods...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No Pods found in the @SelectedNamespace namespace.
        </div>
    }
}

@code {
    [Parameter]
    public string? NamespaceParam { get; set; }
    [Parameter]
    public string? FilterParam { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    string PodStatus = "";
    string Filter = "";
    bool SearchPodName = true;
    bool SearchContainerName;
    bool SearchInitContainerName;

    bool GetNamespacesError;
    bool GetPodsError;
    bool _shouldRender;
    IEnumerable<string> Namespaces = Array.Empty<string>();
    string SelectedNamespace = string.Empty;
    IEnumerable<Pod>? NamespacedPods;
    IEnumerable<Pod>? FilteredPods;
    IEnumerable<EnvironmentVariable>? EnvironmentVariables;
    string EnvVarHeading = "";
    string EnvVarMessage = "";
    int ItemCountAll = 0;
    int ItemCountFiltered = 0;
    int LogRows = 1000;


    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(NamespaceParam))
            {
                SelectedNamespace = NamespaceParam;
                await SetNamespaceCookie();
            }
            else
            {
                SelectedNamespace = await GetNamespaceCookie();
            }
            
            FilterParam = FilterParam ?? "";
            Filter = FilterParam;

            Namespaces = await NamespaceService.GetAllNamespaceNamesAsync();

            await GetPods();

            _shouldRender = true;
        }
        catch
        {
            GetNamespacesError = true;
            GetPodsError = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("addCopyTooltips");
    }

    async Task OnNamespaceSelect(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            SelectedNamespace = e.Value.ToString() ?? string.Empty;
            await SetNamespaceCookie();
            await GetPods();
        }
    }

    async Task SetNamespaceCookie()
    {
        await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "selectedNamespace", SelectedNamespace, DateTime.Now.AddDays(1));
    }

    async Task<string> GetNamespaceCookie()
    {
        try
        {
            var namespaceCookie = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "selectedNamespace");
            if (string.IsNullOrWhiteSpace(namespaceCookie))
            {
                namespaceCookie = "default";
            }
            return namespaceCookie;
        }
        catch
        {
            return "default";
        }
    }

    async Task GetPods()
    {
        NamespacedPods = null;
        FilteredPods = new List<Pod>();
        NamespacedPods = await PodService.GetAllNamespacedPodsAsync(SelectedNamespace);
        ItemCountAll = NamespacedPods?.Count() ?? 0;
        FilteredPods = NamespacedPods;
        ItemCountFiltered = FilteredPods?.Count() ?? 0;

        if (!string.IsNullOrWhiteSpace(Filter))
        {
            await FilterResults();
        }
    }

    async Task GetLogs(string k8sNamespace, string podName, string name)
    {
        var fileStream = await LogService.GetContainerLogsAsync(podName, name, k8sNamespace, LogRows);
        var fileName = $"{k8sNamespace}-{podName}-{name}.log";

        if (fileStream != null)
        {
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }

    async Task GetMetrics(string k8sNamespace, string podName, int port)
    {
        var fileBytes = await PodService.GetContainerMetricsAsync(k8sNamespace, podName, port);

        if (fileBytes != null)
            {
            var fileStream = new MemoryStream(fileBytes);
            var fileName = $"{name}-metrics.txt";

            if (fileStream != null)
            {
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
        }
    }

    async Task GetPodCsv()
    {
        var fileBytes = await PodService.GetAllNamespacedPodsFileAsync(SelectedNamespace);
        
        if (fileBytes != null)
        {
            var fileStream = new MemoryStream(fileBytes);
            var fileName = $"{SelectedNamespace}.csv";

            if (fileStream != null)
            {
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
        }
    }

    async Task GetEnvironmentVariables(string k8sNamespace, string podName, string containerName)
    {
        EnvVarHeading = $"{k8sNamespace} > {podName} > {containerName}";
        EnvVarMessage = $"Loading environment variables for {containerName}...";
        await InvokeAsync(() => { base.StateHasChanged(); });
        
        var showSecrets = false;
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;
            if (user is not null)
            {
                var isAdminEvaluationResult = await AuthorizationService.AuthorizeAsync(user, null, "RequireAdminRole");
                showSecrets = isAdminEvaluationResult.Succeeded;
            }
        }

        EnvironmentVariables = null;
        EnvironmentVariables = await PodService.GetContainerEnvironmentVariablesAsync(k8sNamespace, podName, containerName, showSecrets);
        
        if (EnvironmentVariables != null && EnvironmentVariables.Any())
        {
            EnvVarMessage = "";
        }
        else
        {
            EnvVarMessage = $"No environment variables set for {containerName}.";
        }
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    async Task OnPodStatusSelect(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            PodStatus = e.Value.ToString() ?? string.Empty;
            await FilterResults();
        }
    }

    async Task FilterChange(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
        {
            Filter = (e.Value.ToString() ?? string.Empty).Trim();
            
            if (!string.IsNullOrWhiteSpace(Filter))
            {
                await FilterResults();
            }
        }
    }

    async Task ClearFilter()
    {
        Filter = "";
        await FilterResults();
    }

    async Task SearchPodNameChange()
    {
        SearchPodName = !SearchPodName;
        await FilterResults();
    }

    async Task SearchContainerNameChange()
    {
        SearchContainerName = !SearchContainerName;
        await FilterResults();
    }

    async Task SearchInitContainerNameChange()
    {
        SearchInitContainerName = !SearchInitContainerName;
        await FilterResults();
    }

    async Task FilterResults()
    {
        if ((string.IsNullOrWhiteSpace(Filter) || (!SearchPodName && !SearchContainerName && !SearchInitContainerName)) && string.IsNullOrWhiteSpace(PodStatus))
        {
            FilteredPods = NamespacedPods;
            ItemCountFiltered = FilteredPods != null ? FilteredPods.Count() : 0;
        }
        else
        {
            var filterResults = NamespacedPods;
            
            if (!string.IsNullOrWhiteSpace(PodStatus) && filterResults != null)
            {
                filterResults = filterResults.Where(p =>
                    (!string.IsNullOrWhiteSpace(PodStatus) && (p.PodStatus ?? "").Equals(PodStatus, StringComparison.OrdinalIgnoreCase))
                ).ToList();
            }

            if (!string.IsNullOrWhiteSpace(Filter) && filterResults != null)
            {
                filterResults = filterResults.Where(p =>
                    (SearchPodName && ((p.PodName ?? "").Contains(Filter, StringComparison.OrdinalIgnoreCase) || (p.Name ?? "").Contains(Filter, StringComparison.OrdinalIgnoreCase))) ||
                    (SearchContainerName && p.Containers != null && p.Containers.Any(c => c.ContainerStatus != null && (c.ContainerStatus.Name ?? "").Contains(Filter, StringComparison.OrdinalIgnoreCase))) ||
                    (SearchInitContainerName && p.InitContainers != null && p.InitContainers.Any(c => c.ContainerStatus != null && (c.ContainerStatus.Name ?? "").Contains(Filter, StringComparison.OrdinalIgnoreCase)))
                ).ToList();
            }

            FilteredPods = filterResults;
            ItemCountFiltered = FilteredPods != null ? FilteredPods.Count() : 0;
        }
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    async Task CopyTextToClipboard(string podName)
    {
        var text = $"{Navigator.BaseUri}pods/{SelectedNamespace}/{podName}";
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }
}