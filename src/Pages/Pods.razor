@page "/pods/{namespaceparam?}"

@using System

@inject NamespaceService NamespaceService
@inject PodService PodService
@inject IJSRuntime JS

<h1>Pods</h1>

@if (GetNamespacesError)
{
    <p>Unable to get namespaces. Please try again later.</p>
}
else
{
    <div class="col-sm-4 mb-3">
        <div class="form-group">
            <label for="namespaceSelect" class="form-label">Select a Namespace</label>
            <select class="form-select" id="namespaceSelect" @onchange="@OnSelect">
                @foreach (var ns in Namespaces)
                {
                    @if (@ns.Equals(@SelectedNamespace))
                    {
                        <option value=@ns selected>@ns</option>
                    }
                    else
                    {
                        <option value=@ns>@ns</option>
                    }
                }
            </select>
        </div>
    </div>
}
@if (GetPodsError)
{
    <p>Unable to get pods. Please try again later.</p>
}
else
{
    @if (@NamespacedPods != null && @NamespacedPods.Any())
    {
        <TableTemplate Items="NamespacedPods" TItem="Pod" TableHeaderClass="thead-light">
            <TableHeader>
                <th>Name</th>
                <th>Component</th>
                <th>Version</th>
                <th>Part Of</th>
                <th>Pod Status</th>
                <th>Node IP & Pod IP(s)</th>
                <th>Containers</th>
                <th>Pod Labels</th>
                <th>Pod Annotations</th>
                <th>Pod Volumes</th>
            </TableHeader>
            <RowTemplate>
                <td>@(string.IsNullOrWhiteSpace(context.Name) ? context.PodName : context.Name)</td>
                <td>@context.Component</td>
                <td>@context.Version</td>
                <td>@context.PartOf</td>
                <td>@context.PodStatus</td>
                <td>@context.HostIP
                    @if (@context.PodIPs != null && context.PodIPs.Any())
                    {
                        <ul>
                            @foreach (var ip in context.PodIPs)
                            {
                                <li>@ip</li>
                            }
                        </ul>
                    }
                </td>
                <td>
                    @if (context.Status != null && context.Status.Any())
                    {
                        <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
                data-bs-target="#@context.PodName-collapseContainerStatus" aria-expanded="false"
                aria-controls="collapseContainerStatus">
                            Flip Container Statuses
                        </button>

                        <div class="collapse" id="@context.PodName-collapseContainerStatus">
                            <div class="mb-2"><strong>Pod Name:</strong> @context.PodName</div>
                            <TableTemplate
                    Items="@context.Status.Select(s => new { s.Name, s.Started, s.Ready, s.RestartCount, s.Image, s.ImageID }).OrderBy(s => s.Name)"
                    TableClass="table-sm table-striped">
                                <TableHeader>
                    <th></th>
                    <th>Name</th>
                    <th>Started</th>
                    <th>Ready</th>
                    <th>Restart Count</th>
                    <th>Image</th>
                    <th>Tag</th>
                    <th>Image ID</th>
                    </TableHeader>
                    <RowTemplate Context="statusContext">
                        <td><button @onclick="() => GetLogs(context.Namespace, context.PodName, statusContext.Name)">Logs</button>
                        </td>
                        <td>@statusContext.Name</td>
                        <td>@statusContext.Started</td>
                        <td>@statusContext.Ready</td>
                        <td>@statusContext.RestartCount</td>
                        <td>@if (statusContext.ImageID?.Split('@').Length > 1)
                                        {
                                @statusContext.ImageID?.Split('@')[0]
                                        }
                                        else
                                        {
                                @statusContext.Image?.Split(':')[0]
                                        }
            </td>
            <td>@if (statusContext.Image.StartsWith("sha"))
                                        {
                                @statusContext.Image
                                        }
                                        else
                                        {
                                @statusContext.Image?.Split(':')[1]}</td>
                <td>@if (statusContext.ImageID?.Split('@').Length > 1)
                                        {
                                @statusContext.ImageID?.Split('@')[1]
                                        }
            </td>
        </RowTemplate>
</TableTemplate>
</div>
                    }
        </td>
        <td>
                    @if (context.Labels != null && context.Labels.Any())
                    {
                <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
        data-bs-target="#@context.PodName-collapseLabels" aria-expanded="false" aria-controls="collapseLabels">
                    Flip Pod Labels
                </button>
                <div class="collapse" id="@context.PodName-collapseLabels">
                    <TableTemplate Items="@context.Labels" TableClass="table-sm table-striped">
                        <RowTemplate Context="labelsContext">
            <td>@labelsContext.Key</td>
            <td>@labelsContext.Value</td>
            </RowTemplate>
            </TableTemplate>
            </div>
                    }
        </td>
        <td>
                    @if (context.Annotations != null && context.Annotations.Any())
                    {
                <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
        data-bs-target="#@context.PodName-collapseAnnotations" aria-expanded="false"
        aria-controls="collapseAnnotations">
                    Flip Pod Annotations
                </button>
                <div class="collapse" id="@context.PodName-collapseAnnotations">
                    <TableTemplate Items="@context.Annotations" TableClass="table-sm table-striped">
                        <RowTemplate Context="annotationsContext">
            <td>@annotationsContext.Key</td>
            <td>@annotationsContext.Value</td>
            </RowTemplate>
            </TableTemplate>
            </div>
                    }
        </td>
        <td>
                    @if (context.PodVolumes != null && context.PodVolumes.Any())
                    {
                <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
        data-bs-target="#@context.PodName-collapsePodVolumes" aria-expanded="false" aria-controls="collapsePodVolumes">
                    Flip Pod Volumes
                </button>
                <div class="collapse" id="@context.PodName-collapsePodVolumes">
                    <TableTemplate Items="@context.PodVolumes" TableClass="table-sm table-striped">
                        <RowTemplate Context="podVolumesContext">
            <td>@podVolumesContext</td>
            </RowTemplate>
            </TableTemplate>
            </div>
                    }
        </td>
        </RowTemplate>
        </TableTemplate>
    }
    else if (NamespacedPods == null)
    {
        <div class="alert alert-info" role="alert">
            Loading Pods in @SelectedNamespace namespace...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No Pods Found
        </div>
    }
}

@code {
    [Parameter]
    public string NamespaceParam { get; set; }

    bool GetNamespacesError;
    bool GetPodsError;
    bool _shouldRender;
    IEnumerable<string> Namespaces = Array.Empty<string>();
    string SelectedNamespace = "default";
    IEnumerable<Pod> NamespacedPods;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            NamespaceParam = NamespaceParam ?? "default";
            SelectedNamespace = NamespaceParam;

            var namespaces = await NamespaceService.GetAllNamespacesAsync();
            Namespaces = namespaces.Items.Select(i => i.Metadata.Name);

            await GetPods();

            _shouldRender = true;
        }
        catch
        {
            GetNamespacesError = true;
            GetPodsError = true;
        }
    }

    async Task OnSelect(ChangeEventArgs e)
    {
        SelectedNamespace = e.Value.ToString();
        await GetPods();
    }

    async Task GetPods()
    {
        NamespacedPods = await PodService.GetAllNamespacedPodsAsync(SelectedNamespace);
    }

    async Task GetLogs(string k8sNamespace, string podName, string name)
    {
        var logApi = $"/api/logs/{k8sNamespace}/{podName}/{name}/";
        await JS.InvokeVoidAsync("triggerFileDownload", "", logApi);
    }
}