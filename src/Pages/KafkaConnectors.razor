@page "/kafka-connectors"

@inject IJSRuntime JS
@inject KafkaConnectorService KafkaConnectorService

<h1>Kafka Connectors Status</h1>

<AuthorizeView Policy="RequireEditorRole" Context="auth">
    @if (ConnectorsRestarted)
    {
        <div class="alert alert-success" role="alert">
            Connectors Successfully Restarted!
        </div>
    }
    else if (HasFailedTasks)
    {
        <button @onclick="RestartFailed" class="btn btn-primary my-3" disabled="@FailedButtonIsDisabled">
            Restart All Failed Tasks
        </button>
    }
</AuthorizeView>

@if (GetConnectorsError)
{
    <div class="alert alert-danger" role="alert">
        Unable to get Kafka Connectors. Please try again later.
    </div>
}
else
{
    @if (@Connectors != null && @Connectors.Any())
    {
        <div class="row">
            <h6>Items: @ItemCountAll</h6>
        </div>
        <TableTemplate Items="Connectors" TItem="KafkaConnector" TableHeaderClass="thead-light">
            <TableHeader>
                <th>
                    <div class="form-group row">
                        <div class="col-xl-3 d-none d-xl-block">
                            <label for="name">Name</label>
                        </div>
                        <div class="col-xl-2 d-none d-xl-block">
                            <label for="connectorState">Connector State</label>
                        </div>
                        <div class="col-xl-2 d-none d-xl-block">
                            <label for="taskState">Task State</label>
                        </div>
                        <div class="col-xl-4 d-none d-xl-block">
                            <label for="lastTransitionTime">Last Transition Time</label>
                        </div>
                    </div>
                </th>
            </TableHeader>
            <RowTemplate>
                <td>
                    <div class="form-group row mb-2">
                        <div class="col-xl-3">
                            <label for="name" class="form-label d-xl-none"><b>Name:</b></label>
                            <span id="name" class="form-item">@context.Name</span>
                        </div>
                        <div class="col-xl-2">
                            <label for="connectorState" class="form-label d-xl-none"><b>Connector State:</b></label>
                            <span id="connectorState" class="form-item">@context.ConnectorState</span>
                        </div>
                        <div class="col-xl-2">
                            <label for="taskState" class="form-label d-xl-none"><b>Task State:</b></label>
                            <span id="taskState" class="form-item">@context.TaskState</span>
                        </div>
                        <div class="col-xl-4">
                            <label for="lastTransitionTime" class="form-label d-xl-none"><b>Last Transition
                                    Time:</b></label>
                            <span id="lastTransitionTime" class="form-item">@context.LastTransitionTime</span>
                        </div>
                    </div>
                    @if (@context.Topics.Any())
                    {
                        <div class="row mb-1">
                            <div class="col-xl-12">
                                <button class="btn btn-outline-dark btn-sm collapsed" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#@context.Name-topics" aria-expanded="false"
                                    aria-controls="@context.Name-topics">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Topics</span>
                                </button>
                                <div class="collapse mt-3" id="@context.Name-topics">
                                    <ul>
                                        @foreach (var topic in @context.Topics)
                                        {
                                            <li>@topic</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(@context.TaskTrace))
                    {
                        <div class="row mb-1">
                            <div class="col-xl-12">
                                <button class="btn btn-outline-dark btn-sm collapsed" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#@context.Name-trace" aria-expanded="false" aria-controls="@context.Name-trace">
                                    <span><span class="show">Show</span><span class="hide">Hide</span> Task Trace</span>
                                </button>
                                <div class="collapse mt-3" id="@context.Name-trace">
                                    <pre>@context.TaskTrace</pre>
                                </div>
                            </div>
                        </div>
                    }
                </td>
            </RowTemplate>
        </TableTemplate>
    }
    else if (Connectors == null)
    {
        <div class="alert alert-info" role="alert">
            Loading Connectors...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No Connectors Found
        </div>
    }
}

@if (ShowKafkaApiButtons)
{
    <button @onclick="ShowConfiguration" class="btn btn-primary my-3">
        View Configuration
    </button>
    <button @onclick="ShowLiveStatus" class="btn btn-primary my-3">
        View Live Status
    </button>
    @if (!string.IsNullOrWhiteSpace(@JsonText.ToString()))
    {
        <button @onclick="Clear" class="btn btn-light m-3">
            Clear
        </button>
    }
    <pre>@JsonText</pre>
}

@code {
    bool GetConnectorsError;
    bool ConnectorsRestarted;
    bool _shouldRender;
    IEnumerable<KafkaConnector> Connectors;
    int ItemCountAll = 0;
    bool HasFailedTasks;
    bool FailedButtonIsDisabled;
    bool ShowKafkaApiButtons;
    string StatusJson;
    MarkupString JsonText;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Connectors = await KafkaConnectorService.GetAllKafkaConnectorsAsync();
            ItemCountAll = Connectors.Count();
            HasFailedTasks = Connectors.Any(c =>
            c.TaskState.Equals("failed", StringComparison.OrdinalIgnoreCase) ||
            c.ConnectorState.Equals("failed", StringComparison.OrdinalIgnoreCase)
            );

            ShowKafkaApiButtons = !String.IsNullOrWhiteSpace(Helper.StrimziConnectClusterServiceHost());

            _shouldRender = true;
        }
        catch
        {
            GetConnectorsError = true;
        }
    }

    async Task RestartFailed()
    {
        if (FailedButtonIsDisabled)
        {
            return;
        }

        FailedButtonIsDisabled = true;
        Connectors = await KafkaConnectorService.RestartAllFailedKafkaConnectorsAsync();
        ItemCountAll = Connectors.Count();

        ConnectorsRestarted = true;
    }

    async Task ShowConfiguration()
    {
        StatusJson = await KafkaConnectorService.GetConnectorsStatusAsync(expandStatus: false);
        JsonText = new MarkupString(await JS.InvokeAsync<string>("formatJson", StatusJson));
    }

    async Task ShowLiveStatus()
    {
        StatusJson = await KafkaConnectorService.GetConnectorsStatusAsync(expandInfo: false);
        JsonText = new MarkupString(await JS.InvokeAsync<string>("formatJson", StatusJson));
    }

    void Clear()
    {
        JsonText = new MarkupString();
    }
}