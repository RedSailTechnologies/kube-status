@page "/kafka-connectors"

@inject KafkaConnectorService KafkaConnectorService

<h1>Kafka Connectors Status</h1>

@if (ConnectorsRestarted)
{
    <div class="alert alert-success" role="alert">
        Connectors Successfully Restarted!
    </div>
}
else if (HasFailedTasks)
{
    <button @onclick="RestartFailed" class="btn btn-primary my-3" disabled="@ButtonIsDisabled">
        Restart All Failed Tasks
    </button>
}

@if (GetConnectorsError)
{
    <p>Unable to get Kafka Connectors. Please try again later.</p>
}
else
{
    @if (@Connectors != null && @Connectors.Any())
    {
        <TableTemplate Items="Connectors" TItem="KafkaConnector" TableHeaderClass="thead-light">
            <TableHeader>
                <th>Name</th>
                <th>Last Transition Time</th>
                <th>Connector State</th>
                <th>Task State</th>
                <th>
                    <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
                data-bs-target="#collapseTrace" aria-expanded="false" aria-controls="collapseTrace">
                        Flip Task Trace
                    </button>
                </th>
            </TableHeader>
            <RowTemplate>
                <td>@context.Name</td>
                <td>@context.LastTransitionTime</td>
                <td>@context.ConnectorState</td>
                <td>@context.TaskState</td>
                <td>
                    @if (!string.IsNullOrWhiteSpace(@context.TaskTrace))
                    {
                        <div class="collapse" id="collapseTrace">
                            @context.TaskTrace
                        </div>
                    }
                </td>
            </RowTemplate>
        </TableTemplate>
    }
    else if (Connectors == null)
    {
        <div class="alert alert-info" role="alert">
            Loading Connectors...
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No Connectors Found
        </div>
    }
}

@code {
    bool GetConnectorsError;
    bool ConnectorsRestarted;
    bool _shouldRender;
    IEnumerable<KafkaConnector> Connectors;
    bool HasFailedTasks;
    bool ButtonIsDisabled;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Connectors = await KafkaConnectorService.GetAllKafkaConnectorsAsync();
            HasFailedTasks = Connectors.Any(c =>
            c.TaskState.Equals("failed", StringComparison.OrdinalIgnoreCase) ||
            c.ConnectorState.Equals("failed", StringComparison.OrdinalIgnoreCase)
            );

            _shouldRender = true;
        }
        catch
        {
            GetConnectorsError = true;
        }
    }

    async Task RestartFailed()
    {
        if (ButtonIsDisabled)
        {
            return;
        }

        ButtonIsDisabled = true;
        var kafkaconnectorService = new KafkaConnectorService();
        Connectors = await kafkaconnectorService.RestartAllFailedKafkaConnectorsAsync();

        ConnectorsRestarted = true;
    }
}